import socket
import concurrent.futures
import time
import os

def send_packet(server_ip, server_port, packet, packet_count, thread_id):
    total_sent = 0
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            # T·ªëi ∆∞u socket
            s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
            s.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 2 * 1024 * 1024)  # 2MB buffer
            s.settimeout(10)

            try:
                s.connect((server_ip, server_port))
                s.settimeout(None)
            except socket.timeout:
                print(f"[Lu·ªìng {thread_id}] ‚ùå K·∫øt n·ªëi timeout.")
                return 0
            except Exception as e:
                print(f"[Lu·ªìng {thread_id}] ‚ùå L·ªói khi k·∫øt n·ªëi: {e}")
                return 0

            for i in range(packet_count):
                try:
                    s.sendall(packet)
                    total_sent += 1
                    # Gi·∫£m t·∫£i h·ªá th·ªëng n·∫øu g·ª≠i qu√° nhanh
                    if i % 100 == 0:
                        time.sleep(0.001)
                except Exception as e:
                    print(f"[Lu·ªìng {thread_id}] ‚ùå G√≥i {i+1} l·ªói: {e}")
                    break

            print(f"[Lu·ªìng {thread_id}] ‚úÖ G·ª≠i xong {total_sent}/{packet_count} g√≥i.")
            return total_sent

    except Exception as e:
        print(f"[Lu·ªìng {thread_id}] ‚ùå L·ªói t·ªïng th·ªÉ: {e}")
        return 0

def main():
    try:
        server_address = input("Nh·∫≠p ƒë·ªãa ch·ªâ server (IP:PORT): ").strip()
        if ":" not in server_address:
            raise ValueError("Sai ƒë·ªãnh d·∫°ng. V√≠ d·ª•: 192.168.1.1:8080")
        server_ip, server_port = server_address.split(":")
        server_port = int(server_port)

        packet_size_kb = int(input("Nh·∫≠p k√≠ch th∆∞·ªõc m·ªói g√≥i (KB): "))
        packet_count = int(input("S·ªë g√≥i m·ªói lu·ªìng g·ª≠i: "))
        thread_count = int(input("S·ªë lu·ªìng g·ª≠i ƒë·ªìng th·ªùi: "))

        total_data_mb = packet_size_kb * packet_count * thread_count / 1024
        if total_data_mb > 1000:
            confirm = input(f"‚ö†Ô∏è T·ªïng d·ªØ li·ªáu l√† {total_data_mb:.2f} MB. B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c? (y/n): ")
            if confirm.lower() != "y":
                return

        packet = b"\x00" * (packet_size_kb * 1024)

        print(f"\n‚û°Ô∏è ƒêang g·ª≠i {packet_count} g√≥i/lu·ªìng * {thread_count} lu·ªìng = {packet_count * thread_count} g√≥i")
        print(f"‚û°Ô∏è M·ªói g√≥i: {packet_size_kb} KB | T·ªïng d·ªØ li·ªáu: ~{total_data_mb:.2f} MB\n")

        start = time.time()

        with concurrent.futures.ThreadPoolExecutor(max_workers=thread_count) as executor:
            futures = [executor.submit(send_packet, server_ip, server_port, packet, packet_count, i)
                       for i in range(thread_count)]

            total_sent = 0
            for i, future in enumerate(futures):
                try:
                    sent = future.result(timeout=60)  # TƒÉng timeout n·∫øu g√≥i nhi·ªÅu
                    total_sent += sent
                except concurrent.futures.TimeoutError:
                    print(f"[Lu·ªìng {i}] ‚ö†Ô∏è Timeout sau 60 gi√¢y.")

        end = time.time()
        duration = end - start

        print(f"\n‚úÖ T·ªïng s·ªë g√≥i g·ª≠i th√†nh c√¥ng: {total_sent}/{packet_count * thread_count}")
        print(f"‚è±Ô∏è Th·ªùi gian th·ª±c thi: {duration:.2f} gi√¢y")
        print(f"üöÄ T·ªëc ƒë·ªô trung b√¨nh: {total_sent * packet_size_kb / duration:.2f} KB/s")

        # Th√™m d√≤ng TikTok sau khi ho√†n th√†nh
        print("\ncre_buy tik tok@Dogmeomeoz")

    except Exception as e:
        print(f"‚ùå L·ªói chung: {e}")

if __name__ == "__main__":
    main()
